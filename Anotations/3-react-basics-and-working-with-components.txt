COMO UM COMPONENTE É CONSTRUÍDO?
--> Um componente é a combinação de HTML, CSS e Javascript.
--> O React permite criar componentes reutilizáveis e reativos, que atualizam automaticamente;
--> Não é preciso usar DOM, o React atualiza tudo dinamicamente com o uso de estados.

---------------------------------------------------------------------------------------------------

COMANDOS PARA CRIAR UMA APLICAÇÃO EM REACT:
--> npx create-react-app nome-do-projeto ou npx create-react-app .
--> cd nome-da-pasta-em-react
--> npm start ou yarn start
A aplicação irá abrir no localhost:3000.

---------------------------------------------------------------------------------------------------

ANALISANDO UM PROJETO EM REACT PADRÃO:
--> O arquivo src/index.js é o primeiro a ser executado assim que é carregada a página no localhost:3000.
--> O package.json contém todas as depedências que precisam ser instaladas quando se executa o código npm install.
--> Essas dependências são necessárias para fazer o projeto rodar.

--> O scr/index.js renderiza o elemento com id 'root' do arquivo public/index.html.
--> O App.js é uma função que é exportada e importada no index.js.

---------------------------------------------------------------------------------------------------

INTRODUÇÃO AO JSX:
--> Um arquivo .jsx é um html sendo retornado de um código Javascript.
--> Tudo funciona porque o código é transformado por trás das cenas em outro código suportado pelo browser.
--> O código transformado é mais complexo.

---------------------------------------------------------------------------------------------------

COMO REACT FUNCIONA:
--> No React, como os elementos são uma junção de Javascript, HTML e CSS, podemos criar vário elementos customizados que podem ser reutilizados em mais de um lugar.
--> O código que escrevemos é simples, mas por trás das cenas o React transforma o código em um código usando DOM, que é mais complexo e passo a passo.
--> Esse código que digitamos faz com que o React saiba quando agir ou atualizar o DOM da página ou atualizar um componente dinamicamente a partir de um motivo.
--> Isso é melhor para aplicações maiores.

---------------------------------------------------------------------------------------------------

CONSTRUINDO O PRIMEIRO COMPONENTE CUSTOMIZADO:
--> No React, cada componente é um arquivo novo, e por isso, no React, um projeto tem dezenas de arquivos, pois também tem dezenas de componentes.

PARA CRIAR UM COMPONENTE:
--> Tem que criar uma pasta components dentro do src.
--> Dentro dessa pasta vão ficar os componentes customizados.
--> Cada componente é simplesmente uma função Javascript que retorna um HTML.
--> O nome do componente tem que começar com letra maiúscula, pois o React reconhece nomes maiúsculos como sendo componentes customizados criados pelo desenvolvedor.

CÓDIGO:
function Nome() {
return <>Alguma coisa</>
}
export default Nome;

CÓDIGO PARA IMPORTAR UM COMPONENTE NO APP:
import Nome from './components/Nome';

---------------------------------------------------------------------------------------------------

ATALHO DE TECLADO DO VSCODE PARA FORMATAR TEXTO AUTOMATICAMENTE:
--> Ir em Preferences -> Keyboard Shortcuts -> Format Document.
--> O atalho é Shift Alt F.

---------------------------------------------------------------------------------------------------
COMO RETORNAR DADOS DINAMICAMENTE:
--> Basta apenas declarar títulos, valores, datas, etc em variáveis Javascript, e depois no return dá pra retornar esses valores das variáveis dentro de chaves no html.
const variavel = title;
return <h2>{title}<h2/>

COMO TRANSFORMAR UMA DATA EM UMA STRING:
const expenseDate = new Date(2021, 2, 28);
return <div>{expenseDate.toISOString()}</div>;

---------------------------------------------------------------------------------------------------

COMO DEIXAR UM COMPONENTE REUTILIZÁVEL:
--> É necessário criar no App() um vetor com vários objetos dentro, por exemplo, e com seus atributos. Isso tem que ser feito antes do return.
--> Eu tenho que declarar no return do App() os componente customizados que serão retornados por html.

--> Em cada componente eu devo declarar alguns atributos, como por exemplo:
<Componente title={talcoisa}></Componente>

--> Esses atributos precisam ter os mesmos nomes dos atributos dos ojetos dentro do vetor. 
--> Depois eu entro nos componentes e coloco o "props" como parâmetro de sua função. 
--> O "props" é um método passado como parâmetro da função de um componente.
--> Esse método contém todas as keys (cada key é um atributo de um objeto dentro do vetor) e os valores (cada valor é o valor que um atributo do vetor tem).

--> Para mostrar algo do App() no componente, é só digitar, por exemplo:
<Nomedatag>{props.title}</Nomedatag>

---------------------------------------------------------------------------------------------------

COMO MOSTRAR SÓ O MÊS DE UM OBJETO DATE:
data.toLocaleString('en-US', {month: 'long'});
--> toLocaleString() é um método que ajuda a mostrar uma data de um jeito mais legível.
--> O primeiro parâmetro é uma língua, e o segundo define o que será mostrado.

COMO MOSTRAR SÓ O ANO DE UM OBJETO DATE:
data.getFullYear();

COMO MOSTRAR SÓ O DIA DE UM OBJETO DATE:
data.toLocaleString('en-US', {day: '2-digit'});

---------------------------------------------------------------------------------------------------

SEPARANDO UM COMPONENTE EM MÚLTIPLOS COMPONENTES:
--> Para isso é só pegar partes do código de um componente que são grandes e que ficariam melhores se fossem dispostas em componentes separados.
--> Criar um componente novo para cada uma dessas partes individuais, e colar o código nesses componentes como return.
--> Pegar o parâmetro props no componente criado, retornar o props.propriedade no html.
--> Ir no componente de antes, importar o novo componente criado e depois retornar um html com esse novo componente.
--> Passar nesse novo componente a propriedade que foi criada via props(antes de fechar a tag).
--> Criar um componente.css para estilizar o componente recém-criado, e importar esse css no componente em si.

---------------------------------------------------------------------------------------------------

O CONCEITO DE COMPOSIÇÃO: CHILDREN PROPS
--> Composição é deixar a aplicação dividida ou composta por múltiplas partes que se completam.
--> Dá pra criar um componente que só tenha um CSS nele, tipo um componente próprio que sirva pra conter o css de um card.
--> Pra isso e só colocar "props" como parâmetro da função do novo componente Card, depois criar uma constante chamada 'classes', e dentro dela escrever 'card ' + props.className;
--> Ao atribuir essa constante 'classes' como className da div, a div que for retornada irá pegar a classe 'card' e também a classe que estiver já sendo usada pelo conteúdo dentro do card, caso tenhas.
--> Depois, no return, é pra retornar uma div com a className = {classes}, e dentro da div é pra deixar um {props.children}.
--> O props.children representa tudo que estiver declarado dentro da tag componente Card, aonde quer que ele tenha sido declarado.

--> No fim, fica assim:
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
CARD.JS
import './Card.css';

function Card(props) {
  const classes = 'card ' + props.className;
  
  return <div className={classes}>{props.children}</div>;
}

export default Card;
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
CARD.CSS
.card {
    border-radius: 12px;
    box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);
  }
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

---------------------------------------------------------------------------------------------------