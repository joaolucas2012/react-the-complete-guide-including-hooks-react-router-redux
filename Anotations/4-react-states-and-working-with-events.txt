---------------------------------------------------------------------------------------------------

ADICIONAR EVENT LISTENERS A BOTÕES:
--> É só declarar uma função antes do return do componente com o código que deve ser executado com o clique no botão.
--> Ao criar uma tag button, basta adicionar um atributo chamado 'onClick' que recebe um valor com o mesmo nome da função declarada.
--> O 'onClick' recebe o nome da função entre chaves:
  <button onClick = {nomeDaFunção}></button>
--> A função recebida dentro de chaves não pode ter '()', ou seja, não preciso chamar a função ao passá-la como parâmetro.
--> Quando isso acontece, é como se o valor com o nome da função apontasse para a função em si, e quando acontecer o clique, o valor chamará a função para a qual ele aponta e ela será executada como event listener.

---------------------------------------------------------------------------------------------------

TRABALHANDO COM "STATE":
--> Para fazer o event listener atualizar algo na tela com um clique no botão, é preciso usar o state de um componente.
--> Para isso, é preciso importar um pedaço da biblioteca do react chamado 'useState'. O useState é um react hook.
--> Exemplo:
   import React, { useState } from 'react';
--> É OBRIGATÓRIO chamar o useState() dentro da função do componente (antes do return).


COMO FUNCIONA:
--> O método useState() é uma função que retorna um array de duas posições.
--> O primeiro valor do array é o valor atual que o estado do componente está armazenando ou mostrando na interface.
--> O segundo valor é uma função que pode ser usada para atualizar ou mudar o valor atual que o estado do componente está armazenando e está exibindo na interface.
--> Ele deve ser usado para atualizar algo que está sendo exibido na interface. Mas ISSO VALE SOMENTE PARA O COMPONENTE EM QUE ELE ESTÁ SENDO IMPLEMENTADO.


COMO DEVE SER FEITO:
--> É necessário fazer um desestruturação do array e pegar o valor atual do state e a função que servirá para atualizar o state atual do componente.
--> Padrão:
    const [valorAtual, funçãoQueAtualizaValorAtual] = useState(valorAtual);
--> Aqui, o valor atual do state precisa ser passado por mim como argumento da função useState(), se não, não funciona.
--> O valor que é passado como argumento SÓ É CONSIDERADO NA PRIMEIRA VEZ QUE O USESTATE É CHAMADO.


MELHOR FORMA DE FAZER ISSO:
--> É bom nomear o valor atual com um nome que descreve o que ele é.
--> É bom nomear a função com 'set' + nome do valor atual.
--> Exemplo:
    const [title, setTitle] = useState(props.title);

---------------------------------------------------------------------------------------------------

OLHANDO O USESTATE MAIS DE PERTO:
--> Quando um useState é criado na implementação de um componente, toda vez que esse componente é chamado repetidas vezes no código de outro componente ou do próprio App(), cada instância desse componente terá seu próprio useState que atualiza seu estado individualmente e separadamente.
--> Assim, quando um componente é atualizado pelo useState, os outros componentes similares não são atualizados junto, ou seja, cada componente, embora todos sejam iguais, se atualiza individualmente segundo seu próprio useState.

---------------------------------------------------------------------------------------------------

ADICIONANDO FORM INPUTS:
--> Dá para criar um componente separado para o código do formulário, com dois arquivos, um .js e um .css.
--> Depois é só criar outro componente e retornar a tag do formulário.
--> Por fim, basta ir no App e adicionar a tag do componente que renderiza um formulário.
--> Não esquecer de importar cada componente nos devidos lugares.

---------------------------------------------------------------------------------------------------

REAGINDO COM O INPUT DO USUÁRIO:
--> Para reagir a um evento no React a cada mudança de um elemento, pode-se usar o hook chamado onChange, que reage dinamicamente a cada alteração que ocorre.
--> O onChange é passado como propriedade a uma tag do HTML e recebe uma função como valor, e essa função será executada a cada vez que acontecer alguma mudança no elemento, e o React que invoca essa função automaticamente.
--> Com a função onChange do React, a cada vez que o React executa a função enviada como parâmetro, recebemos um objeto com todas as informações do evento, automaticamente.


COMO FAZER:
--> Basta criar uma função antes do return do componente, que vai ser um event handler que é chamado toda vez que o onChange é ativado.
--> Depois é só ir na tag de input ou algo assim, de um formulário, por exemplo, e adicionar a propriedade onChange e passar o nome da função como valor a essa propriedade entre chaves:
     <input type="text" onChange={funçãoEventHandler} />
--> Se eu colocar o 'event' como argumento da função event handler, posso usar as informações desse evento para criar alguma condição ou lógica.
--> Exemplo:
     const funcaoEventHandler = (event) => {
         console.log(event.target.value);
     };
--> Aqui, o target é uma propriedade do objeto event e o value é um valor disponível no target. A cada letra digitada no campo de input, o value recebe o texto que o input recebeu.

---------------------------------------------------------------------------------------------------

USANDO SOMENTE UM STATE:
--> Ao invés de usar vários states para um formulário, basta apenas usar um, e passar um objeto como parâmetro ao useState.
--> Esse objeto tem que ter suas propriedades setadas com os valores iniciais de cada input.
--> Cada alteração que for feita atualizará uma das propriedades do objeto através da desestruturação de vetor (rest).
--> Exemplo:
    const [userInput, setUserInput] = useState({
        enteredTitle: '',
        enteredAmount: '',
        enteredDate: '',
    });

    const titleChangeHandler = event => {
        setUserInput({
            ...userInput,
            enteredTitle: event.target.value,
        });
    };
--> Aqui, o ...userInput copia todos os outros valores do objeto e muda apenas o enteredTitle para o valor que deve ser atualizado ao ser executado o onChange.

---------------------------------------------------------------------------------------------------

ATUALIZAR UM STATE QUE DEPENDE DO STATE ANTERIOR:
--> No caso de precisar atualizar um state que precisa do objeto do state anterior, é preciso mudar o método.
--> Exemplo:
    setUserInput((prevState) => {
            return { ...prevState, enteredDate: event.target.value };
    });
--> O prevState é o state anterior, que possui o objeto anterior, e a desestruturação do objeto é feita com o objeto anterior.
--> Sendo que o objeto anterior é passado como parâmetro na arrow function do setUserInput.

---------------------------------------------------------------------------------------------------

LIDANDO COM SUBMISSÃO DO FORMULÁRIO:
--> Basta adicionar na tag <form> um método chamado 'onSubmit'.
--> Exemplo:
     <form onSubmit={funcaoHandler}><form />
--> Depois criar a função funcaoHandler que será executada quando o submit for realizado.

---------------------------------------------------------------------------------------------------