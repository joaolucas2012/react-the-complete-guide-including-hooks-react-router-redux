---------------------------------------------------------------------------------------------------

RENDERIZANDO LISTAS DE DADOS:
--> Dá para fazer isso usando o método map();

O QUE O MAP() FAZ:
--> Ele cria um novo array baseado em outro array e pode fazer operações com os valores do array dado como parâmetro.
--> Retorna o array com os valores convertidos para outra coisa que eu quiser.
--> Exemplo:
     { numbers.map( (number) => <li> { number } </li> ) }
--> Aqui, a função mapeou cada um dos valores dentro do array numbers como um 'number' e transformou cada um desses valores em uma lista de itens.
--> No React, é preciso realizar essa operação com o código entre chaves.


RENDERIZAR UMA LISTA DE ITENS:
     {props.expenses.map((expense) => (
          <ExpenseItem
            key={expense.id}
            title={expense.title}
            amount={expense.amount}
            date={expense.date}
          />
        ))}

--> O ExpenseItem é um componente que modela cada objeto do array em um card, por exemplo, através do map().
--> É OBRIGATÓRIO CADA ELEMENTO DA LISTA TER UM ATRIBUTO CHAMADO 'KEY', pois isso serve para identificar cada elemento e melhorar a performance do código a cada novo item que é adicionado na lista.

---------------------------------------------------------------------------------------------------

USANDO STATEFUL LISTS:
--> Basta criar um state no componente e colocar um array fictício como valor inicial desse state.
--> Depois na funçãoHandler que serve pra adicionar novos elementos na lista, basta usar a função que atualiza o state para receber outra função como parâmetro.
--> A função como parâmetro do state deve retornar o array anterior aumentado do novo valor que se deseja acrescentar a esse array de valores.
--> Para isso é só usar o 'prev' + nomeDoState numa desestruturação de array.
--> Exemplo:
     const [expenses, setExpenses] = useState(DUMMY_EXPENSES);

     const addExpenseHandler = (expense) => {
       setExpenses(prevExpenses => {
         return [expense, ...prevExpenses];
       });
     };

---------------------------------------------------------------------------------------------------

PARA FILTRAR UM ARRAY DE ELEMENTOS:
--> Basta usar o método filter().
--> O filter filtra cada elemento do array sob alguma condição, e recebe como parâmetro uma função com a condição desejada.
--> Exemplo:
    const fiteredYear = props.items.filter(expense => {
        return expense.date.getFullYear().toString() ===         selectedYear;
    });
--> Aqui, o método filter() seleciona o item atual do array se a condição da função recebida como parâmetro for true. Se for false, o filter() avança para o próximo item do array.
--> O getFullYear() pega o ano completo de um objeto date.
--> O filter() retorna um novo array com os elementos filtrados, mas sem se perder ou modificar o array original com todos os valores.

---------------------------------------------------------------------------------------------------

PARA RENDERIZAR CONTEÚDOS CONDICIONAIS:
--> Basta colocar entre {} um operador condicional ternário com a condição para renderizar os componentes desejados.
--> Ou então dá pra criar uma lógica no corpo da função do componente (antes do return) e colocar valores em jsx ou html armazenados em variáveis.
--> Depois, dá pra usar condições if pra fazer uma lógica e mudar o valor da variável.
--> Por fim, dá pra simplesmente colocar o nome da variável entre {} no return do componente, e isso faz o componente renderizar o valor dessa variável, seja ele qual for, dependendo da lógica em que essa variável é submetida.

---------------------------------------------------------------------------------------------------